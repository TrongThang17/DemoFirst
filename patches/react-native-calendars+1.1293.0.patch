diff --git a/node_modules/react-native-calendars/src/calendar/day/marking/index.js b/node_modules/react-native-calendars/src/calendar/day/marking/index.js
index 338c1e5..a757eca 100644
--- a/node_modules/react-native-calendars/src/calendar/day/marking/index.js
+++ b/node_modules/react-native-calendars/src/calendar/day/marking/index.js
@@ -39,8 +39,10 @@ const Marking = (props) => {
     const renderMultiMarkings = (containerStyle, items) => {
         return <View style={containerStyle}>{getItems(items)}</View>;
     };
+      
     const renderPeriod = (index, item) => {
         const { color, startingDay, endingDay } = item;
+        console.log('marking',startingDay,'  ',endingDay)
         const styles = [
             style.current.period,
             {
diff --git a/node_modules/react-native-calendars/src/calendar/day/marking/style.js b/node_modules/react-native-calendars/src/calendar/day/marking/style.js
index 50c6e7a..d834b98 100644
--- a/node_modules/react-native-calendars/src/calendar/day/marking/style.js
+++ b/node_modules/react-native-calendars/src/calendar/day/marking/style.js
@@ -17,7 +17,8 @@ export default function styleConstructor(theme = {}) {
         startingDay: {
             borderTopLeftRadius: 2,
             borderBottomLeftRadius: 2,
-            marginLeft: 4
+            marginLeft: 4,
+            
         },
         endingDay: {
             borderTopRightRadius: 2,
diff --git a/node_modules/react-native-calendars/src/calendar/day/period/index.js b/node_modules/react-native-calendars/src/calendar/day/period/index.js
index f27db0e..09ef9c4 100644
--- a/node_modules/react-native-calendars/src/calendar/day/period/index.js
+++ b/node_modules/react-native-calendars/src/calendar/day/period/index.js
@@ -3,9 +3,13 @@ import React, { useCallback, useRef, useMemo } from 'react';
 import { TouchableWithoutFeedback, TouchableOpacity, Text, View } from 'react-native';
 import { xdateToData } from '../../../interface';
 import styleConstructor from './style';
+import { Colors } from '../../../../../../assets/Colors'
+import LinearGradient from 'react-native-linear-gradient';
 import Dot from '../dot';
+import { backgroundColor } from 'react-native-calendars/src/style';
 const PeriodDay = (props) => {
     const { theme, marking, date, onPress, onLongPress, state, accessibilityLabel, testID, children } = props;
+
     const dateData = date ? xdateToData(date) : undefined;
     const style = useRef(styleConstructor(theme));
     const markingStyle = useMemo(() => {
@@ -105,12 +109,66 @@ const PeriodDay = (props) => {
         }
         return { leftFillerStyle, rightFillerStyle, fillerStyle };
     }, [marking]);
+    const customStyles = {
+        dayStylesLeft: {
+            backgroundColor:'rgba(0,0,0,0.1)',
+            width: 40,
+            height: 35,
+            position: 'absolute',
+            marginLeft: 20
+        },
+        dayStylesRight: {
+            backgroundColor:'rgba(0,0,0,0.1)',
+            width: 30
+        },
+    }
     const renderFillers = () => {
         if (marking) {
-            return (<View style={[style.current.fillers, fillerStyles.fillerStyle]}>
-          <View style={[style.current.leftFiller, fillerStyles.leftFillerStyle]}/>
-          <View style={[style.current.rightFiller, fillerStyles.rightFillerStyle]}/>
-        </View>);
+            return (
+                <View style={[style.current.fillers, fillerStyles.fillerStyle]}>
+                    {markingStyle.endingDay ?
+                        <View style={customStyles.dayStylesRight}>
+                            <LinearGradient
+                                colors={Colors.colorLogin}
+                                style={{
+                                    width: 35,
+                                    height: 35,
+                                    borderRadius: 114,
+                                    position: 'absolute',
+                                    marginLeft: 9
+
+                                }}
+                                start={{ x: 0, y: 0 }}
+                                end={{ x: 1, y: 0 }}
+                            >
+                                <View  />
+                            </LinearGradient>
+                        </View>
+                        : null}
+
+                    <View style={[style.current.leftFiller, fillerStyles.leftFillerStyle]} />
+                    <View style={[style.current.rightFiller, fillerStyles.rightFillerStyle]} />
+
+                    {markingStyle.startingDay ?
+                        <View style={customStyles.dayStylesLeft}>
+                            <LinearGradient
+                                colors={Colors.colorLogin}
+                                style={{
+                                    width: 35,
+                                    height: 35,
+                                    borderRadius: 114,
+                                    position: 'absolute',
+                                    marginLeft: -11,
+                                }}
+                                start={{ x: 0, y: 0 }}
+                                end={{ x: 1, y: 0 }}
+                            >
+                                <View />
+                            </LinearGradient>
+                        </View>
+                        : null}
+                </View>
+            );
         }
     };
     const _onPress = useCallback(() => {
@@ -120,18 +178,19 @@ const PeriodDay = (props) => {
         onLongPress?.(dateData);
     }, [onLongPress]);
     const Component = marking ? TouchableWithoutFeedback : TouchableOpacity;
+
     return (<Component testID={testID} onPress={_onPress} onLongPress={_onLongPress} disabled={marking?.disableTouchEvent} accessible accessibilityRole={marking?.disableTouchEvent ? undefined : 'button'} accessibilityLabel={accessibilityLabel}>
-      <View style={style.current.wrapper}>
-        {renderFillers()}
-        <View style={containerStyle}>
-          <Text allowFontScaling={false} style={textStyle}>
-            {String(children)}
-          </Text>
-          <View style={style.current.dotContainer}>
-            <Dot theme={theme} color={marking?.dotColor} marked={marking?.marked}/>
-          </View>
+        <View style={[style.current.wrapper]}>
+            {renderFillers()}
+            <View style={[containerStyle]}>
+                <Text allowFontScaling={false} style={[textStyle]}>
+                    {String(children)}
+                </Text>
+                <View style={style.current.dotContainer}>
+                    <Dot theme={theme} color={marking?.dotColor} marked={marking?.marked} />
+                </View>
+            </View>
         </View>
-      </View>
     </Component>);
 };
 export default PeriodDay;
diff --git a/node_modules/react-native-calendars/src/calendar/day/period/style.js b/node_modules/react-native-calendars/src/calendar/day/period/style.js
index bbbdc78..fddc3ed 100644
--- a/node_modules/react-native-calendars/src/calendar/day/period/style.js
+++ b/node_modules/react-native-calendars/src/calendar/day/period/style.js
@@ -1,6 +1,6 @@
 import { StyleSheet } from 'react-native';
 import * as defaultStyle from '../../../style';
-const FILLER_HEIGHT = 34;
+const FILLER_HEIGHT = 36;
 export default function styleConstructor(theme = {}) {
     const appStyle = { ...defaultStyle, ...theme };
     return StyleSheet.create({
@@ -19,25 +19,28 @@ export default function styleConstructor(theme = {}) {
             position: 'absolute',
             height: FILLER_HEIGHT,
             flexDirection: 'row',
-            left: 0,
-            right: 0
+            left: 1,
+            right: 0,
+           
         },
         leftFiller: {
             backgroundColor: appStyle.calendarBackground,
             height: FILLER_HEIGHT,
-            flex: 1
+            flex: 1,
+           
         },
         rightFiller: {
             backgroundColor: appStyle.calendarBackground,
             height: FILLER_HEIGHT,
-            flex: 1
+            flex: 1,
+       
         },
         text: {
             fontSize: appStyle.textDayFontSize,
             fontFamily: appStyle.textDayFontFamily,
             fontWeight: appStyle.textDayFontWeight,
             color: appStyle.dayTextColor,
-            backgroundColor: 'rgba(255, 255, 255, 0)'
+            backgroundColor: 'rgba(255, 255, 255, 0)',
         },
         dotContainer: {
             position: 'absolute',
diff --git a/node_modules/react-native-calendars/src/calendar/header/index.js b/node_modules/react-native-calendars/src/calendar/header/index.js
index bd75364..e9e1830 100644
--- a/node_modules/react-native-calendars/src/calendar/header/index.js
+++ b/node_modules/react-native-calendars/src/calendar/header/index.js
@@ -1,84 +1,124 @@
 import includes from 'lodash/includes';
+import PropTypes from 'prop-types';
+import memoize from 'memoize-one';
 import XDate from 'xdate';
-import React, { Fragment, useCallback, useMemo, forwardRef, useImperativeHandle, useRef } from 'react';
-import { ActivityIndicator, Platform, View, Text, TouchableOpacity, Image } from 'react-native';
+import React, { Component, Fragment } from 'react';
+import {Colors}  from '../../../../../assets/Colors'
+import LinearGradient from 'react-native-linear-gradient';
+import { ActivityIndicator, Platform, View, Text, TouchableOpacity } from 'react-native';
+import { shouldUpdate } from '../../componentUpdater';
 import { formatNumbers, weekDayNames } from '../../dateutils';
+import { CHANGE_MONTH_LEFT_ARROW, CHANGE_MONTH_RIGHT_ARROW, HEADER_DAY_NAMES, HEADER_LOADING_INDICATOR, HEADER_MONTH_NAME
+// @ts-expect-error
+ } from '../../testIDs';
 import styleConstructor from './style';
-const accessibilityActions = [
-    { name: 'increment', label: 'increment' },
-    { name: 'decrement', label: 'decrement' }
-];
-const CalendarHeader = forwardRef((props, ref) => {
-    const { theme, style: propsStyle, addMonth: propsAddMonth, month, monthFormat, firstDay, hideDayNames, showWeekNumbers, hideArrows, renderArrow, onPressArrowLeft, onPressArrowRight, arrowsHitSlop = 20, disableArrowLeft, disableArrowRight, disabledDaysIndexes, displayLoadingIndicator, customHeaderTitle, renderHeader, webAriaLevel, testID, accessibilityElementsHidden, importantForAccessibility, numberOfDays, current = '', timelineLeftInset } = props;
-    const numberOfDaysCondition = useMemo(() => {
-        return numberOfDays && numberOfDays > 1;
-    }, [numberOfDays]);
-    const style = useRef(styleConstructor(theme));
-    const headerStyle = useMemo(() => {
-        return [style.current.header, numberOfDaysCondition ? style.current.partialHeader : undefined];
-    }, [numberOfDaysCondition]);
-    const partialWeekStyle = useMemo(() => {
-        return [style.current.partialWeek, { paddingLeft: timelineLeftInset }];
-    }, [timelineLeftInset]);
-    const dayNamesStyle = useMemo(() => {
-        return [style.current.week, numberOfDaysCondition ? partialWeekStyle : undefined];
-    }, [numberOfDaysCondition, partialWeekStyle]);
-    const hitSlop = useMemo(() => typeof arrowsHitSlop === 'number'
-        ? { top: arrowsHitSlop, left: arrowsHitSlop, bottom: arrowsHitSlop, right: arrowsHitSlop }
-        : arrowsHitSlop, [arrowsHitSlop]);
-    useImperativeHandle(ref, () => ({
-        onPressLeft,
-        onPressRight
-    }));
-    const addMonth = useCallback(() => {
-        propsAddMonth?.(1);
-    }, [propsAddMonth]);
-    const subtractMonth = useCallback(() => {
-        propsAddMonth?.(-1);
-    }, [propsAddMonth]);
-    const onPressLeft = useCallback(() => {
+class CalendarHeader extends Component {
+    static displayName = 'CalendarHeader';
+    static propTypes = {
+        theme: PropTypes.object,
+        firstDay: PropTypes.number,
+        displayLoadingIndicator: PropTypes.bool,
+        showWeekNumbers: PropTypes.bool,
+        month: PropTypes.instanceOf(XDate),
+        // previousMonth : PropTypes.instanceOf(XDate),
+        // nextMonth : PropTypes.instanceOf(XDate),
+        addMonth: PropTypes.func,
+        /** Month format in the title. Formatting values: http://arshaw.com/xdate/#Formatting */
+        monthFormat: PropTypes.string,
+        /**  Hide day names. Default = false */
+        hideDayNames: PropTypes.bool,
+        /** Hide month navigation arrows. Default = false */
+        hideArrows: PropTypes.bool,
+        /** Replace default arrows with custom ones (direction can be 'left' or 'right') */
+        renderArrow: PropTypes.func,
+        /** Handler which gets executed when press arrow icon left. It receive a callback can go back month */
+        onPressArrowLeft: PropTypes.func,
+        /** Handler which gets executed when press arrow icon right. It receive a callback can go next month */
+        onPressArrowRight: PropTypes.func,
+        /** Disable left arrow. Default = false */
+        disableArrowLeft: PropTypes.bool,
+        /** Disable right arrow. Default = false */
+        disableArrowRight: PropTypes.bool,
+        /** Apply custom disable color to selected day indexes */
+        disabledDaysIndexes: PropTypes.arrayOf(PropTypes.number),
+        /** Replace default title with custom one. the function receive a date as parameter */
+        renderHeader: PropTypes.any,
+        /** Replace default title with custom element */
+        customHeaderTitle: PropTypes.any,
+        /** Provide aria-level for calendar heading for proper accessibility when used with web (react-native-web) */
+        webAriaLevel: PropTypes.number
+    };
+    static defaultProps = {
+        monthFormat: 'MMMM yyyy',
+        webAriaLevel: 1
+    };
+    style;
+    constructor(props) {
+        super(props);
+        this.style = styleConstructor(props.theme);
+    }
+    shouldComponentUpdate(nextProps) {
+        if (nextProps.month?.toString('yyyy MM') !== this.props.month?.toString('yyyy MM')) {
+            return true;
+        }
+        if (nextProps.nextMonth?.toString('yyyy MM') !== this.props.nextMonth?.toString('yyyy MM')) {
+            return true;
+        }
+        if (nextProps.previousMonth?.toString('yyyy MM') !== this.props.previousMonth?.toString('yyyy MM')) {
+            return true;
+        }
+        return shouldUpdate(this.props, nextProps, [
+            'displayLoadingIndicator',
+            'hideDayNames',
+            'firstDay',
+            'showWeekNumbers',
+            'monthFormat',
+            'renderArrow',
+            'disableArrowLeft',
+            'disableArrowRight',
+            'renderHeader',
+            'customHeaderTitle'
+        ]);
+    }
+    addMonth = () => {
+        const { addMonth } = this.props;
+        addMonth?.(1);
+    };
+    subtractMonth = () => {
+        const { addMonth } = this.props;
+        addMonth?.(-1);
+    };
+    onPressLeft = () => {
+        const { onPressArrowLeft,month} = this.props;
         if (typeof onPressArrowLeft === 'function') {
-            return onPressArrowLeft(subtractMonth, month);
+            return onPressArrowLeft(this.subtractMonth, month);
         }
-        return subtractMonth();
-    }, [onPressArrowLeft, subtractMonth, month]);
-    const onPressRight = useCallback(() => {
+        return  this.subtractMonth();
+    };
+    onPressRight = () => {
+        const { onPressArrowRight,month } = this.props;
         if (typeof onPressArrowRight === 'function') {
-            return onPressArrowRight(addMonth, month);
-        }
-        return addMonth();
-    }, [onPressArrowRight, addMonth, month]);
-    const onAccessibilityAction = useCallback((event) => {
-        switch (event.nativeEvent.actionName) {
-            case 'decrement':
-                onPressLeft();
-                break;
-            case 'increment':
-                onPressRight();
-                break;
-            default:
-                break;
+            return onPressArrowRight(this.addMonth, month);
         }
-    }, [onPressLeft, onPressRight]);
-    const renderWeekDays = useMemo(() => {
-        const dayOfTheWeek = new XDate(current).getDay();
-        const weekDaysNames = numberOfDaysCondition ? weekDayNames(dayOfTheWeek) : weekDayNames(firstDay);
-        const dayNames = numberOfDaysCondition ? weekDaysNames.slice(0, numberOfDays) : weekDaysNames;
-        return dayNames.map((day, index) => {
-            const dayStyle = [style.current.dayHeader];
-            if (includes(disabledDaysIndexes, index)) {
-                dayStyle.push(style.current.disabledDayHeader);
+        return this.addMonth();
+    };
+    renderWeekDays = memoize(weekDaysNames => {
+        const { disabledDaysIndexes } = this.props;
+        return weekDaysNames.map((day, idx) => {
+            const dayStyle = [this.style.dayHeader];
+            if (includes(disabledDaysIndexes, idx)) {
+                dayStyle.push(this.style.disabledDayHeader);
             }
-            const dayTextAtIndex = `dayTextAtIndex${index}`;
-            if (style.current[dayTextAtIndex]) {
-                dayStyle.push(style.current[dayTextAtIndex]);
+            if (this.style[`dayTextAtIndex${idx}`]) {
+                dayStyle.push(this.style[`dayTextAtIndex${idx}`]);
             }
-            return (<Text allowFontScaling={false} key={index} style={dayStyle} numberOfLines={1} accessibilityLabel={''}>
+            return (<Text allowFontScaling={false} key={idx} style={dayStyle} numberOfLines={1} accessibilityLabel={''}>
           {day}
         </Text>);
         });
-    }, [firstDay, current, numberOfDaysCondition, numberOfDays, disabledDaysIndexes]);
-    const _renderHeader = () => {
+    });
+    renderHeader = () => {
+        const { customHeaderTitle, renderHeader, month, monthFormat, testID, webAriaLevel } = this.props;
         const webProps = Platform.OS === 'web' ? { 'aria-level': webAriaLevel } : {};
         if (renderHeader) {
             return renderHeader(month);
@@ -86,60 +126,163 @@ const CalendarHeader = forwardRef((props, ref) => {
         if (customHeaderTitle) {
             return customHeaderTitle;
         }
-        return (<Fragment>
-        <Text allowFontScaling={false} style={style.current.monthText} testID={`${testID}.title`} {...webProps}>
-          {formatNumbers(month?.toString(monthFormat))}
-        </Text>
-      </Fragment>);
+        return (<Fragment >
+                <Text allowFontScaling={false} style={this.style.monthText} testID={testID ? `${HEADER_MONTH_NAME}-${testID}` : HEADER_MONTH_NAME} {...webProps}>
+                    {formatNumbers(month?.toString(monthFormat))}
+                </Text>
+        </Fragment>);
     };
-    const _renderArrow = (direction) => {
+    renderArrow(direction) {
+        const { hideArrows, disableArrowLeft, disableArrowRight, renderArrow, testID,month,monthFormat } = this.props;
+        
         if (hideArrows) {
             return <View />;
         }
+        var prevMonth 
+        var nextMonth 
+        switch(formatNumbers(month?.toString(monthFormat))){
+            
+            case 'January':{
+                prevMonth = 'December';
+                nextMonth = 'February';
+                break;
+            };
+            case 'February':{
+                prevMonth = 'January';
+                nextMonth = 'March';
+                break;
+            };
+            case 'March':{
+                prevMonth = 'February';
+                nextMonth = 'April';
+                break;
+            };
+            case 'April':{
+                prevMonth = 'March';
+                nextMonth = 'May';
+                break;
+            };
+            case 'May':{
+                prevMonth = 'April';
+                nextMonth = 'June';
+                break;
+            };
+            case 'June':{
+                prevMonth = 'May';
+                nextMonth = 'July';
+                break;
+            };
+            case 'July':{
+                prevMonth = 'June';
+                nextMonth = 'August';
+                break;
+            };
+            case 'August':{
+                prevMonth = 'July';
+                nextMonth = 'September';
+                break;
+            };
+            case 'September':{
+                prevMonth = 'August';
+                nextMonth = 'October';
+                break;
+            };
+            case 'October':{
+                prevMonth = 'September';
+                nextMonth = 'November';
+                break;
+            };
+            case 'November':{
+                prevMonth = 'October';
+                nextMonth = 'December';
+                break;
+            };
+            case 'December':{
+                prevMonth = 'November';
+                nextMonth = 'January';
+                break;
+            };
+        }
         const isLeft = direction === 'left';
-        const arrowId = isLeft ? 'leftArrow' : 'rightArrow';
-        const shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
-        const onPress = !shouldDisable ? isLeft ? onPressLeft : onPressRight : undefined;
-        const imageSource = isLeft ? require('../img/previous.png') : require('../img/next.png');
+        const id = isLeft ? CHANGE_MONTH_LEFT_ARROW : CHANGE_MONTH_RIGHT_ARROW;
+        const testId = testID ? `${id}-${testID}` : id;
+        const onPress = isLeft ? this.onPressLeft : this.onPressRight;
+        // const imageSource = isLeft ? require('../img/previous.png') : require('../img/next.png');
         const renderArrowDirection = isLeft ? 'left' : 'right';
-        return (<TouchableOpacity onPress={onPress} disabled={shouldDisable} style={style.current.arrow} hitSlop={hitSlop} testID={`${testID}.${arrowId}`}>
-        {renderArrow ? (renderArrow(renderArrowDirection)) : (<Image source={imageSource} style={shouldDisable ? style.current.disabledArrowImage : style.current.arrowImage}/>)}
-      </TouchableOpacity>);
-    };
-    const renderIndicator = () => {
+        const shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
+        return (<TouchableOpacity onPress={!shouldDisable ? onPress : undefined} disabled={shouldDisable} style={[this.style.arrow, { width: 90, height: 40, backgroundColor: '', justifyContent: 'center', alignItems: 'center', paddingHorizontal: 10,marginHorizontal:20 }]} hitSlop={{ left: 20, right: 20, top: 20, bottom: 20 }} testID={testId}>
+            {renderArrow ? (renderArrow(renderArrowDirection)) : (isLeft ? <Text style={{color:'rgba(130, 129, 135, 1)'}}>{prevMonth}</Text> : <Text style={{color:'rgba(130, 129, 135, 1)'}}>{nextMonth}</Text>)}
+        </TouchableOpacity>);
+    }
+    renderIndicator() {
+        const { displayLoadingIndicator, theme, testID } = this.props;
         if (displayLoadingIndicator) {
-            return (<ActivityIndicator color={theme?.indicatorColor} testID={`${testID}.loader`}/>);
+            return (<ActivityIndicator color={theme?.indicatorColor} testID={testID ? `${HEADER_LOADING_INDICATOR}-${testID}` : HEADER_LOADING_INDICATOR}/>);
         }
-    };
-    const renderWeekNumbersSpace = () => {
-        return showWeekNumbers && <View style={style.current.dayHeader}/>;
-    };
-    const renderDayNames = () => {
+    }
+    renderDayNames() {
+        const { firstDay, hideDayNames, showWeekNumbers, testID } = this.props;
+        const weekDaysNames = weekDayNames(firstDay);
         if (!hideDayNames) {
-            return (<View style={dayNamesStyle} testID={`${testID}.dayNames`}>
-          {renderWeekNumbersSpace()}
-          {renderWeekDays}
+            return (<View style={this.style.week} testID={testID ? `${HEADER_DAY_NAMES}-${testID}` : HEADER_DAY_NAMES}>
+          {showWeekNumbers && <Text allowFontScaling={false} style={this.style.dayHeader}></Text>}
+          {this.renderWeekDays(weekDaysNames)}
+        </View>);
+        }
+    }
+    render() {
+        const { style, testID } = this.props;
+        return (<View testID={testID} style={style} accessible accessibilityRole={'adjustable'} accessibilityActions={[
+                { name: 'increment', label: 'increment' },
+                { name: 'decrement', label: 'decrement' }
+            ]} onAccessibilityAction={this.onAccessibilityAction} accessibilityElementsHidden={this.props.accessibilityElementsHidden} // iOS
+         importantForAccessibility={this.props.importantForAccessibility} // Android
+        >
+        <View style={this.style.header}>
+          {this.renderArrow('left')}
+          <View style={this.style.headerContainer}>
+            {this.renderHeader()}
+            {this.renderIndicator()}
+                </View>
+                {this.renderArrow('right')}
+            </View>
+
+            <View style={{
+                width: '90%',
+                height: 2,
+                backgroundColor: 'rgba(0, 0, 0, 0.4)',
+                alignSelf: 'center',
+                borderRadius: 20,
+                marginBottom: 20,
+                marginTop: 5
+            }} >
+                <LinearGradient
+                    colors={Colors.colorLogin}
+                    style={{
+                        width: '30%',
+                        height: 2,
+                        borderRadius: 20,
+                        alignSelf: 'center',
+
+                    }}
+                    start={{ x: 0, y: 0 }}
+                    end={{ x: 1, y: 0 }}
+                />
+            </View>
+            {this.renderDayNames()}
         </View>);
+    }
+    onAccessibilityAction = (event) => {
+        switch (event.nativeEvent.actionName) {
+            case 'decrement':
+                this.onPressLeft();
+                break;
+            case 'increment':
+                this.onPressRight();
+                break;
+            default:
+                break;
         }
     };
-    return (<View testID={testID} style={propsStyle} accessible accessibilityRole={'adjustable'} accessibilityActions={accessibilityActions} onAccessibilityAction={onAccessibilityAction} accessibilityElementsHidden={accessibilityElementsHidden} // iOS
-     importantForAccessibility={importantForAccessibility} // Android
-    >
-      <View style={headerStyle}>
-        {_renderArrow('left')}
-        <View style={style.current.headerContainer}>
-          {_renderHeader()}
-          {renderIndicator()}
-        </View>
-        {_renderArrow('right')}
-      </View>
-      {renderDayNames()}
-    </View>);
-});
+}
 export default CalendarHeader;
-CalendarHeader.displayName = 'CalendarHeader';
-CalendarHeader.defaultProps = {
-    monthFormat: 'MMMM yyyy',
-    webAriaLevel: 1,
-    arrowsHitSlop: 20
-};
